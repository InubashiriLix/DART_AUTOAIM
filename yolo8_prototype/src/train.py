#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Train a 2-class YOLOv8n, export INT8-ONNX, and compile to .rknn
for Orange Pi 5 / RK3588 NPU.

‰æùËµñÔºö
    pip install ultralytics==8.*  torch<=2.4  \
                rknn-toolkit2==2.3.2  pyyaml  onnx  onnxruntime
    # ÂÖ∂‰∏≠ torch<=2.4 ÊòØ‰∏∫ÈÅøÂÖç PyTorch 2.6+ ÁöÑ weights_only Êñ∞ÂÆâÂÖ®ÈôêÂà∂
"""

from pathlib import Path
import random, yaml
from ultralytics import YOLO
from rknn.api import RKNN

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚ë† ÂÖ®Â±ÄÈÖçÁΩÆ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DATA_YAML = "/home/inubashiri/03_DART/src/dataset/data.yaml"
MODEL_CFG = "yolov8n.yaml"  # ‰∏§Á±ª‰ªªÂä°Áî® n ÁâàÊúÄÂø´
IMG_SIZE = 512  # ‰∏éÈÉ®ÁΩ≤ÂàÜËæ®Áéá‰øùÊåÅ‰∏ÄËá¥
EPOCHS = 100
BATCH = 32
EXP_NAME = "exp_base_light_rk3588"
CALIB_N = 200  # ÈáèÂåñÊ†°ÂáÜÂõæÁâáÂº†Êï∞
CALIB_TXT = "calib.txt"
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚ë° ËÆ≠ÁªÉ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
print("üöÄ ÂºÄÂßãËÆ≠ÁªÉ YOLOv8n ...")
model = YOLO(MODEL_CFG)
_ = model.train(
    data=DATA_YAML,
    imgsz=IMG_SIZE,
    epochs=EPOCHS,
    batch=BATCH,
    name=EXP_NAME,
    workers=8,
)

trainer = model.trainer
save_dir = Path(trainer.save_dir)
best_pt = save_dir / "weights/best.pt"

# ‚òÖ Êñ∞ÁâàÂèñÂÄºÔºöÂåπÈÖç‰ªª‰ΩïÂê´ 'mAP50' ÁöÑÈîÆÔºàmAP50, mAP50(B), mAP@0.5‚Ä¶Ôºâ
final_mAP50 = next(
    (v for k, v in trainer.metrics.items() if "mAP50" in k or "mAP@0.5" in k), None
)

if final_mAP50 is not None:
    print(f"   ÊúÄÁªà mAP50 = {final_mAP50:.3f}")
else:
    print("‚ö†Ô∏è  Êú™Ëé∑ÂèñÂà∞ mAP50ÔºàÈîÆ‰∏çÂ≠òÂú®Ôºâ")

print(f"üéØ ËÆ≠ÁªÉÂÆåÊàêÔºåbest.pt = {best_pt}")
